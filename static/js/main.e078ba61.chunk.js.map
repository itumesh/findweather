{"version":3,"sources":["logo.svg","Components/TempApp.jsx","App.js","reportWebVitals.js","index.js"],"names":["TempApp","useState","search","setSearch","city","setCity","useEffect","a","url","fetch","response","json","resJson","main","console","log","fetchApi","class","onChange","event","target","value","type","autocomplete","placeholder","day","Date","getDay","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAAe,I,kDCkFAA,EA/EC,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACbC,EADa,KACLC,EADK,OAEIF,mBAAS,IAFb,mBAEbG,EAFa,KAEPC,EAFO,KAQpBC,qBAAU,YACM,uCAAG,gCAAAC,EAAA,6DACTC,EADS,2DACiDN,EADjD,iEAEQO,MAAMD,GAFd,cAETE,EAFS,gBAGOA,EAASC,OAHhB,OAGTC,EAHS,OAKfP,EAAQO,EAAQC,MAChBC,QAAQC,IAAIH,GANG,2CAAH,qDASdI,KACC,CAACd,IAqBJ,OACE,mCACE,sBAAKe,MAAM,WAAX,UACE,iCACE,uBACEC,SAzCS,SAACC,GAClBhB,EAAUgB,EAAMC,OAAOC,QAyCfC,KAAK,OACLC,aAAa,MACbN,MAAM,aACNO,YAAY,2BAIdpB,EAGA,iCACE,0BAASa,MAAM,WAAf,UACE,qBAAKA,MAAM,OAAX,SAAmBf,IACnB,qBAAKe,MAAM,OAAX,SAtCG,WACb,IAAMQ,GAAM,IAAIC,MAAOC,SACvB,OAAY,IAARF,EACK,SACU,IAARA,EACF,UACU,IAARA,EACF,YACU,IAARA,EACF,WACU,IAARA,EACF,SACU,IAARA,EACF,WAEA,SAuBoBE,QAGrB,sBAAKV,MAAM,UAAX,UACE,sBAAKA,MAAM,OAAX,UACGb,EAAKwB,KACN,8CAGF,sBAAKX,MAAM,SAAX,mBACSb,EAAKyB,SADd,mBACqCzB,EAAK0B,SAD1C,mBAdJ,oDC7CKC,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCKSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e078ba61.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useState } from \"react\";\r\nimport \"./css/style.css\";\r\n\r\nconst TempApp = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  const InputEvent = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&appid=10efb77a72330a0e72b72041cbfed994`;\r\n      const response = await fetch(url);\r\n      const resJson = await response.json();\r\n\r\n      setCity(resJson.main);\r\n      console.log(resJson);\r\n    };\r\n\r\n    fetchApi();\r\n  }, [search]);\r\n\r\n  const getDay = () => {\r\n    const day = new Date().getDay();\r\n    if (day === 1) {\r\n      return \"Monday\";\r\n    } else if (day === 2) {\r\n      return \"Tuesday\";\r\n    } else if (day === 3) {\r\n      return \"Wednesday\";\r\n    } else if (day === 4) {\r\n      return \"Thursday\";\r\n    } else if (day === 5) {\r\n      return \"Friday\";\r\n    } else if (day === 6) {\r\n      return \"Saturday\";\r\n    } else {\r\n      return \"Sunday\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div class=\"app-wrap\">\r\n        <header>\r\n          <input\r\n            onChange={InputEvent}\r\n            type=\"text\"\r\n            autocomplete=\"off\"\r\n            class=\"search-box\"\r\n            placeholder=\"Search for a city...\"\r\n          />\r\n        </header>\r\n\r\n        {!city ? (\r\n          <p>No Data Found</p>\r\n        ) : (\r\n          <main>\r\n            <section class=\"location\">\r\n              <div class=\"city\">{search}</div>\r\n              <div class=\"date\">{getDay()}</div>\r\n            </section>\r\n\r\n            <div class=\"current\">\r\n              <div class=\"temp\">\r\n                {city.temp}\r\n                <span>°Cel</span>\r\n              </div>\r\n              {/* <div class=\"weather\">Sunny</div> */}\r\n              <div class=\"hi-low\">\r\n                Min : {city.temp_min}°cel | Max : {city.temp_max}°cel\r\n              </div>\r\n            </div>\r\n          </main>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TempApp;\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport TempApp from \"./Components/TempApp\";\n\nfunction App() {\n  return (\n    <>\n      <TempApp />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}